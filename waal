#!/usr/bin/perl

# waal - Wrapper for Android Adb Logcat reformating it into a pretty
#        colorful output.

# Copyright 2010 Xavier-Emmanuel VINCENT
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

use strict;
use feature qw(switch);
use warnings;
use List::Util qw[min];
use Term::ANSIColor;

# Need libio-interactive-perl package.
use IO::Interactive qw(is_interactive);

# For getting the number of columns in the terminal.
# Need libterm-readkey-perl packages.
use Term::ReadKey;

my $app_name      = 'waal';
my $app_full_name = 'Wrapper for Android Adb Logcat';
my $version       = '1.0.0';
my $author        = 'Xavier-Emmanuel VINCENT';
my $copyright     = 'Copyright 2010';

# For any informations about color, see http://perldoc.perl.org/Term/ANSIColor.html
# foreground = black red green yellow blue magenta cyan white
# background = on_black on_red on_green on_yellow on_blue on_magenta on_cyan on_white

# Color for priorities
# There is no entry for silent because it doesn't print anything.
# Eclipse priority colors are: black (verbose), blue (debug), green (information), orange (warning), red (error).
my %priority;
$priority{V} = 'yellow';     # verbose
$priority{D} = 'blue';       # debug
$priority{I} = 'green';      # info
$priority{W} = 'cyan';       # warning
$priority{E} = 'red';        # error
$priority{F} = 'magenta';    # fatal

# Android Logcat output format regexp
# I define here format regexps with qr/exp/ which compile the exp into a var. Besides,
# using /$var/o (with o) tells Perl to perform variable substitution only once.
# .* is voracious so I use .*? in order to match a minimal number of characters.
# raw format => doesn't need a test. Print in the else.
my %format;
$format{brief}   = qr/^([VDIWEF])\/(.*?)\(([ \d]{5})\):(.*)$/o;
$format{process} = qr/^([VDIWEF])\(([ \d]{5})\)(.*?)  \((.*?)\)/o;
$format{tag}     = qr/^([VDIWEF])\/(.*?):(.*)$/o;
$format{thread}  = qr/^([VDIWEF])\(([ \d]{5}):([ \d]{5})\)(.*)$/o;
$format{time} =
qr/^(\d\d)-(\d\d) (\d\d:\d\d:\d\d\.\d\d\d) ([VDIWEF])\/(.*?)\(([ \d]{5})\):(.*)$/o;
$format{threadtime} =
qr/^(\d\d)-(\d\d) (\d\d:\d\d:\d\d\.\d\d\d) ([ \d]{5}) ([ \d]{5}) ([VDIWEF]) (.*?):(.*)$/o;
$format{long} =
qr/^\[ (\d\d)-(\d\d) (\d\d:\d\d:\d\d\.\d\d\d) ([ \d]{5}):([ \d]{5}) ([VDIWEF])\/(.*?) \]/o;

my ($columns) = GetTerminalSize();
my $SPACE = q{ };    # q{ } is the same as ' '.

# The goal of this function is to wrap the message so we get a print on two columns. On the first column,
# there are all informations (priority, pid, tag, ...) and on the second column there is the message.
sub indent_message {
    my ( $indent, $message ) = @_;    # arguments
    $indent += 1;                     # better for pretty print
    my $length_message = length($message);

  # ($columns - 2) because I want a space between last character and the window.
    my $wrap   = ( $columns - 2 ) - $indent;
    my $offset = 0;
    my $length;
    while ( $offset < $length_message ) {
        $length = min( $wrap, $length_message - $offset );
        print substr( $message, $offset, $length ) . "\n";
        $offset += $length;
        if ( $offset < $length_message ) {
            print $SPACE x $indent;
        }
    }
    return;
}

# Tab of colors for highlighting (for terminal with dark background).
my @hl_colors = (
    'black on_red',
    'black on_green',
    'black on_yellow',
    'black on_blue',
    'black on_magenta',
    'black on_cyan',
    'black on_white',
    'white on_red',
    'white on_green',
    'white on_yellow',
    'white on_blue',
    'white on_magenta',
    'white on_cyan'
);

# The $hl hash table stores the item which will be highlighted (key) and the color used for this item (value).
my %hl;

# This function defines a single color for each item.
sub highlight {
    my ($var) = @_;    # argument
    if ( !exists( $hl{$var} ) ) {
        $hl{$var} = $hl_colors[0];

        # The two follow lines move the first item of the tabular to the end.
        push( @hl_colors, $hl_colors[0] );
        shift(@hl_colors);
    }
    return $hl{$var};
}

# Trim function.
sub trim {
    my $string = shift;
    $string =~ s/^\s+|\s+$//g;
    return $string;
}

# Help message
sub usage {
    print "$app_name $version ($app_full_name)\n";
    print "$copyright $author\n\n";
    print "Usage:  adb logcat [<option>] ... [<filter-spec>] ... | waal\n";
}

# I define here the length of all items and I use it in the function indent_message.
# length{long} is useless;
my %length;
$length{day}      = 2;
$length{hour}     = 12;
$length{month}    = 2;
$length{pid}      = 5;
$length{priority} = 1;
$length{tag}      = 23;
$length{thread}   = 5;

# check if something is coming from STDIN.
if ( is_interactive() ) {

    # Display the help message.
    usage;
}
else {

    # Read the STDIN.
    while (<>) {
        given ($_) {
            when (/$format{brief}/o) {
                my $priority = $1;
                my $tag      = trim($2);
                my $pid      = $3;
                my $message  = $4;

                printf( "%s %s ",
                    $pid, colored( $priority, $priority{$priority} ) );
                print color highlight($tag);
                printf( " %23s ", $tag );
                print color 'reset';
                indent_message(
                    $length{pid} + $length{priority} + $length{tag} + 4,
                    $message );    # 4 spaces
            }
            when (/$format{process}/o) {
                my $priority = $1;
                my $pid      = $2;
                my $message  = $3;
                my $tag      = trim($4);

                printf( " %s %23s ",
                    colored( $priority, $priority{$priority} ), $tag );
                print color highlight($pid);
                printf( " %s ", $pid );
                print color 'reset';
                indent_message(
                    $length{priority} + $length{tag} + $length{pid} + 5,
                    $message );    # 5 spaces
            }
            when (/$format{tag}/o) {
                my $priority = $1;
                my $tag      = trim($2);
                my $message  = $3;

                printf colored( " $priority ", $priority{$priority} );
                print color highlight($tag);
                printf( " %23s ", $tag );
                print color 'reset';
                indent_message( $length{priority} + $length{tag} + 4,
                    $message );    # 4 spaces
            }
            when (/$format{thread}/o) {
                my $priority = $1;
                my $pid      = $2;
                my $thread   = $3;
                my $message  = $4;

                printf( " %s %s ",
                    colored( $priority, $priority{$priority} ), $pid );
                print color highlight($thread);
                printf( " %5s ", $thread );
                print color 'reset';
                indent_message(
                    $length{priority} + $length{pid} + $length{thread} + 5,
                    $message );    # 5 spaces
            }
            when (/$format{time}/o) {
                my $month    = $1;
                my $day      = $2;
                my $hour     = $3;
                my $priority = $4;
                my $tag      = trim($5);
                my $pid      = $6;
                my $message  = $7;

                printf( "%s %s %s-%s %s ",
                    $pid, colored( $priority, $priority{$priority} ),
                    $day, $month, $hour );
                print color highlight($tag);
                printf( " %23s ", $tag );
                print color 'reset';
                indent_message(
                    $length{pid} +
                      $length{priority} +
                      $length{day} +
                      $length{month} +
                      $length{hour} +
                      $length{tag} +
                      7,
                    $message
                );    # 6 spaces + '-'
            }
            when (/$format{threadtime}/o) {
                my $month    = $1;
                my $day      = $2;
                my $hour     = $3;
                my $pid      = $4;
                my $thread   = $5;
                my $priority = $6;
                my $tag      = trim($7);
                my $message  = $8;

                printf( "%s ", $pid );
                printf( "%s %s-%s %s ",
                    colored( $priority, $priority{$priority} ),
                    $day, $month, $hour );
                print color highlight($tag);
                printf( " %23s/%s", $tag, $thread );
                print color 'reset';
                indent_message(
                    $length{pid} +
                      $length{priority} +
                      $length{day} +
                      $length{month} +
                      $length{hour} +
                      $length{tag} +
                      $length{thread} +
                      7,
                    $message
                );    # 5 spaces + '-'
            }
            when (/$format{long}/o) {
                my $month    = $1;
                my $day      = $2;
                my $hour     = $3;
                my $pid      = $4;
                my $thread   = $5;
                my $priority = $6;
                my $tag      = trim($7);

                printf(
                    "%s %s %s %s-%s %s ",
                    $pid, $thread, colored( $priority, $priority{$priority} ),
                    $day, $month, $hour
                );
                print color highlight($tag);
                printf( " %23s ", $tag );
                print color 'reset';
                print $SPACE;
            }
            when ( !/^\s*$/o ) {    # I don't want to print empty lines.
                print $_;
            }
        }
    }
}
